#!/bin/bash

# Stop script on: 
# - errors (-e), 
# - unset variables (-u)
# - pipe fails (-o pipefail)
set -euo pipefail

# ================
# Key task outline
# ================
# 1. Ask for sudo password
# 2. SSH key setup
# 3. Install dependencies: Xcode, Homebrew
# 4. Install Homebrew brews (also runs `brew update`) and casks
# 5. Run Homebrew clean-up tasks
# 6. Install Mac App Store applications
# 7. Install npm global packages
# 8. Set global .gitconfig details
# 9. Open sites for manual downloads


# =========
# CONSTANTS
# =========
APPS="$PWD/install/apps"
BREWS="$PWD/install/brews"
CASKS="$PWD/install/casks"
MANUAL_INSTALLS="$PWD/install/manual"
NPM_PACKAGES="$PWD/install/npm"
UTILITIES="$PWD/utilities/utils"


# ============================================
# ERROR: Let the user know if the script fails
# ============================================
warn_script_failure() {
    FAILURE_CODE=$?
    test $FAILURE_CODE -ne 0 && message "[𝘅] macOS set-up script failed." >&2
    exit $FAILURE_CODE
}

trap warn_script_failure EXIT


# ====================================
# DEBUGGING: Line-by-line step-through
# ====================================
# -- Uncomment trap line
# -- Run script with `bash -x ./start`
#    or add `-x` flag to `set` line, at top of this file
# trap '(read -p "[$BASH_SOURCE:$LINENO] $BASH_COMMAND")' DEBUG


# ===============
# SIGINT RESPONSE
# ===============
# -- Kill all background processes when CTRL+C pressed (OS sends SIGINT signal)
trap 'kill $(jobs -p)' INT


# ---

printf "
=================================================
****** Welcome to this macOS set-up script ******
=================================================
- Safe to run multiple times on the same machine
- It installs, upgrades, or skips packages based
  on what is already installed
-------------------------------------------------
\n"


# =================================
# LOAD UTILITIES: Warn if not found
# =================================
# shellcheck disable=SC1091
# shellcheck source=utilities/utils
if [ -f "$UTILITIES" ] && . "$UTILITIES"; then
    # Run system checks...
    check_bash_version
    check_internet_connection
else
    printf "\n ⚠️  %s file not found. Unable to continue set-up.\n" "$UTILITIES"
    exit 1
fi


# ================
# PROMPT: Password
# ================
message "Administrator password required"
ask_for_sudo


# ================
# CREATE: Profiles
# ================
create_zshrc


# ===============
# PROMPT: SSH key
# ===============
# chapter "Checking for SSH key..."
# @todo


# =====================
# INSTALL: Dependencies
# =====================
chapter "Installing dependencies..."

# Xcode CLT
# =========
if type xcode-select >&- && 
    xpath=$( xcode-select --print-path ) &&
    test -d "${xpath}" && test -x "${xpath}"; then
    message_nochange "Xcode already installed"
else
    message "Installing Xcode..."
    xcode-select --install
    message_success "Xcode installed"
fi


# ~/.bin directory
# ================
# if [ ! -d "$HOME/.bin/" ]; then
#     mkdir "$HOME/.bin"
# fi


# NVM/Node
# ========
if ! [ -x "$(command -v nvm)" ]; then
    # Install nvm
    message "Installing NVM/Node..."
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
    # Ready nvm command for immediate use
    # Note: These lines are also added to the user profile
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
    message_success "NVM/Node installed"
    # Install node & npm
    message "Installing latest Node..."
    nvm install node
    nvm use node
    nvm run node --version
else
    message_nochange "NVM/Node already installed"
fi


# Homebrew
# ========
if ! [ -x "$(command -v brew)" ]; then
    message "Installing Homebrew..."
    curl -fsSL 'https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh' | bash
    export PATH="/usr/local/bin:$PATH"
    message_success "Homebrew package manager installed"
else
    message_nochange "Homebrew package manager already installed"
fi

if brew list --formula | grep -Fq brew-cask; then
    message "Uninstalling old Homebrew-Cask..."
    brew uninstall --force brew-cask
    message_success "Homebrew-Cask uninstalled"
fi


# =======================
# INSTALL: Homwbrew Brews
# =======================
chapter "Installing Homebrew formulae..."

if [ -e "$BREWS" ]; then
    for brew in $(<"$BREWS")
    do
        install_brews "$brew"
    done
else
    message "No additional install/brews requested."
fi


# ================
# UPDATE: Homebrew
# ================
chapter "Updating Homebrew formulae..."
brew update


# =======================
# INSTALL: Homebrew Casks
# =======================
chapter "Installing applications via Homebrew..."
if [ -e "$CASKS" ]; then
    for cask in $(<"$CASKS")
    do
        install_application_via_brew "$cask"
    done
else
    message "No additional install/casks requested."
fi


# =====================
# CLEAN: Homebrew files
# =====================
chapter "Clean-up Homebrew files..."
brew cleanup 2> /dev/null


# ===================================
# INSTALL: Mac App Store applications
# ===================================
chapter "Installing Mac App Store applications..."

if [ -x mas ]; then
    message_fail "Please install mas-cli first: brew mas ...skipping"
else
    if [ -e "$APPS" ]; then
        if mas account &>/dev/null; then
            get_key_value_from_file "$APPS" install_application_via_app_store
        else
            message_fail "Please sign-in to the App Store first ...skipping"
        fi
    else
        message "No additional install/apps requested."
    fi
fi


# ===========================
# Install NPM global packages
# ===========================
chapter "Installing global npm packages..."

if [ -e "$NPM_PACKAGES" ]; then
    get_key_value_from_file "$NPM_PACKAGES" install_npm_packages
else
    message "No additional install/npm items requested."
fi


# =============================
# Set global .gitconfig details
# =============================
if type -P "git" &>/dev/null; then
    GIT_CONFIG="$HOME/.gitconfig"

    if [[ $(create_file "$GIT_CONFIG") ]]; then
        chapter "Set global .gitconfig details..."
        set_global_gitconfig_details
    fi
fi


# =======================
# Set global .m2 settings
# =======================
if type -P "mvn" &>/dev/null; then
    MVN_SETTINGS="$HOME/.m2/settings.xml"

    if [[ $(create_file "$MVN_SETTINGS") ]]; then
        chapter "Create Maven .m2/settings.xml file..."
        create_maven_settings_file
    fi
fi


# ===============================
# Open sites for manual downloads
# ===============================
chapter "Manual downloads..."

if [ -e "$MANUAL_INSTALLS" ]; then
    if ask "Open manual downloads in browser?" N; then
        get_key_value_from_file "$MANUAL_INSTALLS" open_manual_downloads
    fi
fi


# ===========
# END MESSAGE
# ===========
printf "
=================================================
******* macOS set-up script run completed *******
=================================================
\n"

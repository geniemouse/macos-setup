#!/bin/bash

# Stop script on: 
# - errors (-e), 
# - unset variables (-u)
# - pipe fails (-o pipefail)
set -euo pipefail

# ================
# Key task outline
# ================
# 1. Ask for sudo password
# 2. SSH key setup
# 3. Install dependencies: Xcode, Homebrew
# 4. Install Homebrew brews (also runs `brew update`) and casks
# 5. Run Homebrew clean-up tasks
# 6. Install Mac App Store applications
# 7. Install npm global packages
# 8. Anything else...?


# =========
# CONSTANTS
# =========
APPS="$PWD/config/apps"
BREWS="$PWD/config/brews"
CASKS="$PWD/config/casks"
# NPM_PACKAGES="$PWD/config/npm"


# ============================================
# ERROR: Let the user know if the script fails
# ============================================
warn_script_failure() {
    FAILURE_CODE=$?
    test $FAILURE_CODE -ne 0 && printf "[𝘅] macOS set-up script failed.\n" >&2
    exit $FAILURE_CODE
}

trap warn_script_failure EXIT


# ====================================
# DEBUGGING: Line-by-line step-through
# ====================================
# -- Uncomment trap line
# -- Run script with `bash -x ./start`
#    or add `-x` flag to `set` line, at top of this file
# trap '(read -p "[$BASH_SOURCE:$LINENO] $BASH_COMMAND")' DEBUG


# ===============
# SIGINT RESPONSE
# ===============
# -- Kill all background processes when CTRL+C pressed (OS sends SIGINT signal)
trap 'kill $(jobs -p)' INT


# ---


printf "Starting macOS set-up script...\n"

# =================================
# LOAD UTILITIES: Warn if not found
# =================================
# Disable shellcheck 'Not following' source rule
# shellcheck disable=SC1091
if [ -f utils ] && . utils; then 
    # Run system checks...
    check_bash_version
    check_internet_connection
else
    printf "\n ⚠️  ./utils file not found.\n"
    exit 1
fi


# ================
# PROMPT: Password
# ================
printf "Administator password required\n"
ask_for_sudo


# ===============
# PROMPT: SSH key
# ===============
# printf "Checking for SSH key...\n"
# @todo


# =====================
# INSTALL: Dependencies
# =====================
printf "Installing dependencies...\n"

# Xcode
# =====
if type xcode-select >&- && 
    xpath=$( xcode-select --print-path ) &&
    test -d "${xpath}" && test -x "${xpath}"; then
    message_nochange "Xcode already installed"
else
    printf "Installing Xcode..."
    xcode-select --install
    message_success "Xcode installed"
fi


# ~/.bin directory
# ================
# if [ ! -d "$HOME/.bin/" ]; then
#     mkdir "$HOME/.bin"
# fi


# Homebrew
# ========
if ! [ -x "$(command -v brew)" ]; then
    printf "Installing Homebrew..."
    curl -fsSL 'https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh' | bash
    export PATH="/usr/local/bin:$PATH"
    message_success "Homebrew package manager installed"
else
    message_nochange "Homebrew package manager already installed"
fi

if brew list --formula | grep -Fq brew-cask; then
    printf "Uninstalling old Homebrew-Cask..."
    brew uninstall --force brew-cask
    message_success "Homebrew-Cask uninstalled"
fi


# =======================
# INSTALL: Homwbrew Brews
# =======================
if [ -e "$BREWS" ]; then
    printf "Installing Homebrew formulae...\n"
    for brew in $(<"$BREWS")
    do
        install_brews "$brew"
    done
else
    printf "No additional config/brews requested.\n"
fi


# ================
# UPDATE: Homebrew
# ================
printf "Updating Homebrew formulae...\n"
brew update


# =======================
# INSTALL: Homebrew Casks
# =======================
# if [ -e "$CASKS" ]; then
#     printf "Installing applications via Homebrew...\n"
#     for cask in $(<"$CASKS")
#     do
#         install_application_via_brew "$cask"
#     done
# else
#     printf "No additional config/casks requested.\n"
# fi


# =====================
# CLEAN: Homebrew files
# =====================
printf "Clean-up Homebrew files...\n"
brew cleanup 2> /dev/null


# ===================================
# INSTALL: Mac App Store applications
# ===================================
if [ -x mas ]; then
    message_fail "Please install mas-cli first: brew mas ...skipping"
else
    if [ -e "$APPS" ]; then
        if mas_setup; then
            # Workaround for associative array in Bash 3
            # https://stackoverflow.com/questions/6047648/bash-4-associative-arrays-error-declare-a-invalid-option
            for app in $(<"$APPS")
            do
                KEY="${app%%::*}"
                VALUE="${app##*::}"
                install_application_via_app_store "$KEY" "$VALUE"
            done
        else
            message_fail "Please sign-in to the App Store first ...skipping"
        fi
    fi
fi


# ===========================
# Install NPM global packages
# ===========================
# @todo

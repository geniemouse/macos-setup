#!/bin/bash

minBashVersion=3


# =======
# Helpers
# =======

ask() {
    # https://djm.me/ask
    local prompt default reply

    while true; do

        if [ "${2:-}" = "Y" ]; then
            prompt="Y/n"
            default=Y
        elif [ "${2:-}" = "N" ]; then
            prompt="y/N"
            default=N
        else
            prompt="y/n"
            default=
        fi

        # Ask the question (not using "read -p" as it uses stderr not stdout)
        echo -n "[?] $1 [$prompt] "

        # Read the answer (use /dev/tty in case stdin is redirected from somewhere else)
        read -r reply </dev/tty

        # Default?
        if [ -z "$reply" ]; then
            reply=$default
        fi

        # Check if the reply is valid
        case "$reply" in
            Y*|y*) return 0 ;;
            N*|n*) return 1 ;;
        esac

    done
}

get_key_value_from_file() {
    # Associative array in Bash 3
    # https://stackoverflow.com/questions/6047648/bash-4-associative-arrays-error-declare-a-invalid-option
    # Adapted to read line-by-line, so app names can include spaces
    FILE=$1
    ACTION=$2
    DELIMITER=${3:-::}

    grep -v '^ *#' < "$FILE" | while IFS= read -r line
    do
        KEY="${line%%$DELIMITER*}"
        VALUE="${line##*$DELIMITER}"
        # Pass key/value to the action callback
        $ACTION "$KEY" "$VALUE"
    done
    unset IFS
}

create_file() {
    FULLPATH=$1
    DIRECTORY=${FULLPATH%/*}
    FILENAME=${FULLPATH##*/}

    if [[ ! -f $FULLPATH ]]; then
        mkdir -p "$DIRECTORY"
        touch "$DIRECTORY/$FILENAME"
        message_success "$FULLPATH file created"
    fi
}


# =========
# Messaging
# =========

chapter() {
    printf "\n%s\n" "$1"
    printf "========================================\n"
}

message() {
    printf "%s\n" "$1"
}

message_download() {
    message "[‚Üì] Installing $1..."
}

message_fail() {
    message "[ùòÖ] $1"
}

message_nochange() {
    message "[-] $1 ...skipping"
}

message_question() {
    message "[?] $1"
}

message_success() {
    message "[‚úì] $1"
}


# =============
# SYSTEM CHECKS
# =============
check_bash_version() {
    if ((BASH_VERSINFO[0] < "$minBashVersion"))
    then
        message "You need at least bash $minBashVersion or higher to run this script."
        exit 1
    fi
}

check_internet_connection() {
    if ping -q -c1 google.com &> /dev/null; then
        message_success "Internet connection detected"
    else
        message "Internet connection not found. Please check and try again."
        exit 1
    fi
}

ask_for_sudo() {
    # Ask for the administrator password upfront
    sudo -v &> /dev/null

    # Update existing `sudo` time stamp
    # until this script has finished.
    # https://gist.github.com/cowboy/3118588

    # Keep-alive: update existing `sudo` time stamp until script has finished
    while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
    message_success "Password cached"
}

create_zshrc() {
    local ZSHRC_PROFILE="$HOME/.zshrc"
    local _ZSHRC="$PWD/profile/_zshrc"

    if [[ $(create_file "$ZSHRC_PROFILE") ]]; then
        if [ -f "$_ZSHRC" ]; then
            cat "$_ZSHRC" > "$ZSHRC_PROFILE"
            message_success "$ZSHRC_PROFILE file created"
        else
            printf "\n ‚ö†Ô∏è  Could not copy initial profile content from %s; file not found.\n" "$_ZSHRC"
            exit 1
        fi
    fi
}

append_to_zshrc() {
    local text="$1"
    local skip_new_line="${2:-0}"
    local zshrc

    if [[ -w "$HOME/.zshrc.local" ]]; then
        zshrc="$HOME/.zshrc.local"
    else
        zshrc="$HOME/.zshrc"
    fi

    if ! grep -Fqs "$text" "$zshrc"; then
        if [[ "$skip_new_line" -eq 1 ]]; then
            printf "%s\n" "$text" >> "$zshrc"
        else
            printf "\n%s\n" "$text" >> "$zshrc"
        fi
    fi
}

install_brews() {
    local BREW=$1
    # `grep -x` flag to perform exact match: equivalent to regex ^(BREW)$
    if test ! "$(brew list --formula | grep -x "$BREW")"; then
        message_download "$BREW"
        brew install "$BREW"
        message_success "$BREW installed"
	else
        message_nochange "$BREW already installed"
    fi
}

install_application_via_brew() {
    local CASK=$1
    # `grep -x` flag to perform exact match: equivalent to regex ^(CASK)$
    if test ! "$(brew list --cask | grep -x "$CASK")"; then
        message_download "$CASK"
        # Don't install open JDK casks in Applications
        if [[ "$CASK" == "adoptopenjdk"* ]]; then
            if [[ "$CASK" == "adoptopenjdk" ]]; then
                brew install --cask "$CASK"
                brew tap adoptopenjdk/openjdk
            else
                brew install --cask "$CASK"
            fi
        else
            brew install --cask "$CASK" --appdir=/Applications
        fi
        message_success "$CASK installed"
    else
        message_nochange "$CASK already installed"
    fi
}

install_application_via_app_store() {
    local APP_ID=$1
    local APP_NAME=$2
    if ! mas list | grep "$APP_ID" &> /dev/null; then
        message_download "$APP_NAME"
        mas install "$APP_ID"
        message_success "$APP_NAME installed"
    else
        message_nochange "$APP_NAME already installed"
    fi
}

install_npm_packages() {
    local NPM_ID=$1
    local NPM_NAME=$2
    if ! (type -P "$NPM_NAME" || npm list --global "$NPM_ID" | grep "$NPM_ID") &>/dev/null; then
        message_download "$NPM_ID"
        npm install --global "$NPM_ID"
        message_success "$NPM_NAME installed"
    else
        message_nochange "$NPM_ID already installed. Trying update..."
        npm update --global "$NPM_ID"
        message_success "$NPM_NAME updated"
    fi
}

open_manual_downloads() {
    local URL=$1
    local NAME=$2
    echo "Opening browser tab: $NAME" && open "$URL"
}

set_global_gitconfig_details() {
    # Set global default branch name
    git config --global init.defaultBranch main
    # Set global default rebase approach
    git config --global pull.rebase false
    # ---
    message "Add your .gitconfig username & email:"
    # Username
    message_question "What name?" && read -r NAME
    git config --global user.name "$NAME"
    # Email
    message_question "What email address?" && read -r EMAIL
    git config --global user.email "$EMAIL"
    # Output
    message_success "Saved .gitconfig details"
    git config --global --list
}

create_maven_settings_file() {
    local MVN_SETTINGS="$HOME/.m2/settings.xml"
    local _M2_SETTINGS_XML="$PWD/profile/_m2_settings.xml"

    if [ -f "$_M2_SETTINGS_XML" ]; then
        cat "$_M2_SETTINGS_XML" > "$MVN_SETTINGS"
        message_success "$MVN_SETTINGS file created"
    else
        printf "\n ‚ö†Ô∏è  Could not copy initial profile content from %s; file not found.\n" "$_M2_SETTINGS_XML"
        exit 1
    fi
}

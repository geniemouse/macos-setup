#!/bin/bash

minBashVersion=3
TIMESTAMP=$(date +%F)
logFile=./log/mac-setup-run-"$TIMESTAMP".log


# =========
# Messaging
# =========

create_log_file() {
    if [[ ! -e logFile ]]; then
        mkdir -p ./log
        touch ./log/mac-setup-run-"$TIMESTAMP".log
    fi
}

chapter() {
    printf "\n%s\n" "$1" | tee -a "$logFile"
    printf "========================================\n"
}

message() {
    printf "%s\n" "$1" | tee -a "$logFile"
}

message_download() {
    message "[‚Üì] Installing $1..."
}

message_fail() {
    message "[ùòÖ] $1"
}

message_nochange() {
    message "[-] $1 ...skipping"
}

message_success() {
    message "[‚úì] $1"
}


# =============
# SYSTEM CHECKS
# =============
check_bash_version() {
    if ((BASH_VERSINFO[0] < "$minBashVersion"))
    then
        message "You need at least bash $minBashVersion or higher to run this script."
        exit 1
    fi
}

check_internet_connection() {
    if ping -q -c1 google.com &> /dev/null; then
        message_success "Internet connection detected"
    else
        message "Internet connection not found. Please check and try again."
        exit 1
    fi
}

ask_for_sudo() {
    # Ask for the administrator password upfront
    sudo -v &> /dev/null

    # Update existing `sudo` time stamp
    # until this script has finished.
    # https://gist.github.com/cowboy/3118588

    # Keep-alive: update existing `sudo` time stamp until script has finished
    while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
    message_success "Password cached"
}

create_zshrc() {
    local ZSHRC_PROFILE="$HOME/.zshrc"
    local _ZSHRC="$PWD/config/_zshrc"
    if [[ ! -f "$ZSHRC_PROFILE" ]]; then
        touch "$ZSHRC_PROFILE"
        if [ -f "$_ZSHRC" ]; then
            cat "$_ZSHRC" > "$ZSHRC_PROFILE"
        else
            printf "\n ‚ö†Ô∏è  %s file not found.\n" "$_ZSHRC"
            exit 1
        fi
    fi
}

append_to_zshrc() {
    local text="$1"
    local skip_new_line="${2:-0}"
    local zshrc

    if [[ -w "$HOME/.zshrc.local" ]]; then
        zshrc="$HOME/.zshrc.local"
    else
        zshrc="$HOME/.zshrc"
    fi

    if ! grep -Fqs "$text" "$zshrc"; then
        if [[ "$skip_new_line" -eq 1 ]]; then
            printf "%s\n" "$text" >> "$zshrc"
        else
            printf "\n%s\n" "$text" >> "$zshrc"
        fi
    fi
}

install_brews() {
    local BREW=$1
    # `grep -x` flag to perform exact match: equivalent to regex ^(BREW)$
    if test ! "$(brew list --formula | grep -x "$BREW")"; then
        message_download "$BREW"
        brew install "$BREW" >/dev/null
        message_success "$BREW installed"
	else
        message_nochange "$BREW already installed"
    fi
}

install_application_via_brew() {
    local CASK=$1
    # `grep -x` flag to perform exact match: equivalent to regex ^(CASK)$
    if test ! "$(brew list --cask | grep -x "$CASK")"; then
        message_download "$CASK"
        # Don't install open JDK casks in Applications
        if [[ "$CASK" == "adoptopenjdk"* ]]; then
            brew install --cask "$CASK" >/dev/null
        else
            brew install --cask "$CASK" --appdir=/Applications >/dev/null
        fi
        message_success "$CASK installed"
    else
        message_nochange "$CASK already installed"
    fi
}

install_application_via_app_store() {
    local APP_ID=$1
    local APP_NAME=$2
    if ! mas list | grep "$APP_ID" &> /dev/null; then
        message_download "$APP_NAME"
        mas install "$APP_ID" >/dev/null
        message_success "$APP_NAME installed"
    else
        message_nochange "$APP_NAME already installed"
    fi
}

install_npm_packages() {
    local NPM_ID=$1
    local NPM_NAME=$2
    if ! type -P "$NPM_NAME" &>/dev/null; then
        message_download "$NPM_ID"
        npm install "$NPM_ID" --global --silent
        message_success "$NPM_NAME installed"
    else
        message_nochange "$NPM_ID already installed"
    fi
}

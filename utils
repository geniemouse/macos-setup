#!/bin/bash

minBashVersion=3

die() {
    echo "$1" >&2
    exit 1
}

# =========
# Messaging
# =========
message_download() {
    printf "[↓] Installing %s...\n" "$1"
}

message_fail() {
    printf "[𝘅] %s\n" "$1"
}

message_nochange() {
    printf "[-] %s ...skipping\n" "$1"
}

message_success() {
    printf "[✓] %s\n" "$1"
}


# =============
# SYSTEM CHECKS
# =============

check_bash_version() {
    if ((BASH_VERSINFO[0] < "$minBashVersion"))
    then
        printf "You need at least bash %s.0 or higher to run this script.\n" $minBashVersion
        exit 1
    fi
}

check_internet_connection() {
    if ping -q -c1 google.com &> /dev/null; then
        message_success "Internet connection detected"
    else
        printf "Internet connection not found. Please check and try again.\n"
        exit 1
    fi
}

ask_for_sudo() {
    # Ask for the administrator password upfront
    sudo -v &> /dev/null

    # Update existing `sudo` time stamp
    # until this script has finished.
    # https://gist.github.com/cowboy/3118588

    # Keep-alive: update existing `sudo` time stamp until script has finished
    while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
    message_success "Password cached"
}

install_brews() {
    local brew=$1
    # `grep -x` flag to perform exact match: equivalent to regex ^(brew)$
    if test ! "$(brew list --formula | grep -x "$brew")"; then
        message_download "$brew"
        brew install "$brew" >/dev/null
        message_success "$brew installed"
	else
        message_nochange "$brew already installed"
    fi
}

install_application_via_brew() {
    local cask=$1
    # `grep -x` flag to perform exact match: equivalent to regex ^(cask)$
    if test ! "$(brew list --cask | grep -x "$cask")"; then
        message_download "$cask"
        # Don't install open JDK casks in Applications
        if [[ "$cask" == "adoptopenjdk"* ]]; then
            brew install --cask "$cask" >/dev/null
        else
            brew install --cask "$cask" --appdir=/Applications >/dev/null
        fi
        message_success "$cask installed"
    else
        message_nochange "$cask already installed"
    fi
}
